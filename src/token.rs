#[derive(Debug, Clone, PartialEq)]
pub enum Token {
    Data,
    Group,
    Do,
    Run,
    LBrace,
    RBrace,
    LParenthesis,
    RParenthesis,
    Colon,
    Semicolon,
    DoubleQuote,
    SingleQuote,
    Equal,
    GreaterThan,
    LessThan,
    GreaterOrEqual,
    LessOrEqual,
    AddSign,
    SubSign,
    MulSign,
    DivSign,
    ModSign,
    Dot,
    Comma,
    CreateInstructionKeyword,
    Let,
    If,
    For,
    Symbol(String),
}

impl Token {
    pub fn get_value(&self) -> String {
        match self {
            Token::Data                       => "data".to_string(),
            Token::Group                      => "group".to_string(),
            Token::Do                         => "do".to_string(),
            Token::Run                        => "run".to_string(),
            Token::LBrace                     => "{".to_string(),
            Token::RBrace                     => "}".to_string(),
            Token::LParenthesis               => "(".to_string(),
            Token::RParenthesis               => ")".to_string(),
            Token::Colon                      => ":".to_string(),
            Token::Semicolon                  => ";".to_string(),
            Token::DoubleQuote                => "\"".to_string(),
            Token::SingleQuote                => "'".to_string(),
            Token::Equal                      => "=".to_string(),
            Token::GreaterThan                => ">".to_string(),
            Token::LessThan                   => "<".to_string(),
            Token::GreaterOrEqual             => ">=".to_string(),
            Token::LessOrEqual                => "<=".to_string(),
            Token::AddSign                    => "+".to_string(),
            Token::SubSign                    => "-".to_string(),
            Token::MulSign                    => "*".to_string(),
            Token::DivSign                    => "/".to_string(),
            Token::ModSign                    => "%".to_string(),
            Token::Dot                        => ".".to_string(),
            Token::Comma                      => ",".to_string(),
            Token::CreateInstructionKeyword   => "create".to_string(),
            Token::Let                        => "let".to_string(),
            Token::If                         => "if".to_string(),
            Token::For                        => "for".to_string(),
            Token::Symbol(value)     => value.clone(),
        }
    }

    pub fn iter_static() -> Vec<Token> {
        [
            Token::Data,
            Token::Group,
            Token::Do,
            Token::Run,
            Token::LBrace,
            Token::RBrace,
            Token::LParenthesis,
            Token::RParenthesis,
            Token::Colon,
            Token::Semicolon,
            Token::DoubleQuote,
            Token::SingleQuote,
            Token::Equal,
            Token::GreaterThan,
            Token::LessThan,
            Token::GreaterOrEqual,
            Token::LessOrEqual,
            Token::AddSign,
            Token::SubSign,
            Token::MulSign,
            Token::DivSign,
            Token::ModSign,
            Token::Dot,
            Token::Comma,
            Token::CreateInstructionKeyword,
            Token::Let,
            Token::If,
            Token::For,
        ].to_vec()
    }
}
